name: Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AZURE_RESOURCE_GROUP: 'Prodigy'
  AZURE_LOCATION: 'australiaeast'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build .NET solution
      run: dotnet build --no-restore

    - name: Publish backend
      run: |
        cd src/backend
        dotnet publish -c Release -o bin/Release/net8.0/publish
        echo "Backend publish completed. Files created:"
        ls -la bin/Release/net8.0/publish/ | head -10

    - name: Publish functions
      run: |
        cd azure-functions
        # Ensure local.settings.json is included in publish for Azure Functions v4
        cp local.settings.json bin/Release/net8.0/publish/ 2>/dev/null || echo "local.settings.json not found, creating minimal version"
        dotnet publish -c Release -o bin/Release/net8.0/publish
        echo "Functions publish completed. Files created:"
        ls -la bin/Release/net8.0/publish/ | head -10

    - name: Install frontend dependencies
      run: |
        cd src/frontend
        npm ci

    - name: Build frontend
      run: |
        cd src/frontend
        npm run build

    - name: Run frontend linting
      run: |
        cd src/frontend
        npm run lint

    - name: Prepare frontend deployment package
      run: |
        echo "📦 Creating frontend deployment package..."
        mkdir -p frontend-deployment-package
        
        # Copy server files to root of deployment package
        cp src/frontend/server.js frontend-deployment-package/
        cp src/frontend/package.json frontend-deployment-package/
        cp src/frontend/package-lock.json frontend-deployment-package/
        
        # Copy built frontend files to dist subdirectory
        cp -r src/frontend/dist frontend-deployment-package/
        
        echo "📋 Frontend deployment package structure:"
        find frontend-deployment-package -type f | head -20
        
        echo "🔧 Verifying package.json contains correct start script..."
        grep -A2 '"scripts"' frontend-deployment-package/package.json || echo "⚠️ scripts section not found"

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifacts
        path: |
          src/backend/bin/Release/net8.0/publish/
          !src/backend/bin/Release/net8.0/publish/**/*.pdb

    - name: Verify backend artifacts path
      run: |
        echo "Verifying backend artifacts path exists and has content:"
        ls -la src/backend/bin/Release/net8.0/publish/ || echo "Backend publish directory not found!"

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifacts
        path: frontend-deployment-package/

    - name: Upload functions artifacts
      uses: actions/upload-artifact@v4
      with:
        name: functions-artifacts
        path: |
          azure-functions/bin/Release/net8.0/publish/
          !azure-functions/bin/Release/net8.0/publish/**/*.pdb

    - name: Verify functions artifacts path
      run: |
        echo "Verifying functions artifacts path exists and has content:"
        ls -la azure-functions/bin/Release/net8.0/publish/ || echo "Functions publish directory not found!"

  deploy-infrastructure:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      backend-url: ${{ steps.deploy-rest-api.outputs.backendUrl }}
      frontend-url: ${{ steps.deploy-rest-api.outputs.frontendUrl }}
      functions-url: ${{ steps.deploy-rest-api.outputs.functionsUrl }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Deploy Infrastructure via REST API
      id: deploy-rest-api
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
        AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
        APP_NAME: 'prodigy'
        ENVIRONMENT: 'prod'
        APP_SERVICE_PLAN_SKU: 'B1'
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LINKEDIN_CLIENT_ID: ${{ secrets.LINKEDIN_CLIENT_ID }}
        LINKEDIN_CLIENT_SECRET: ${{ secrets.LINKEDIN_CLIENT_SECRET }}
      run: |
        echo "🚀 Starting REST API-based infrastructure deployment..."
        echo "📋 Deployment parameters:"
        echo "  App Name: prodigy"
        echo "  Environment: prod" 
        echo "  Location: ${{ env.AZURE_LOCATION }}"
        echo "  App Service Plan SKU: B1"
        echo "  Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        
        chmod +x ./deploy-with-rest-api.sh
        ./deploy-with-rest-api.sh

  deploy-backend:
    needs: [build-and-test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-artifacts
        path: ./backend-artifacts

    - name: Verify backend artifacts downloaded
      run: |
        echo "🔍 Verifying backend artifacts were downloaded:"
        echo "Directory structure:"
        ls -la ./backend-artifacts/ || echo "❌ Backend artifacts directory not found!"
        echo ""
        echo "📊 Backend artifacts file count: $(find ./backend-artifacts -type f | wc -l)"
        echo "📋 Key files check:"
        echo "  - Prodigy.Backend.dll: $(ls ./backend-artifacts/Prodigy.Backend.dll 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - appsettings.json: $(ls ./backend-artifacts/appsettings.json 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - web.config: $(ls ./backend-artifacts/web.config 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo ""
        echo "📁 Full file listing:"
        find ./backend-artifacts -type f | head -20

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure App Service
      id: deploy-backend
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'prodigy-prod-api'
        package: './backend-artifacts'

    - name: Verify backend deployment
      run: |
        echo "🔍 Verifying backend deployment completed..."
        echo "Deployment status: ${{ steps.deploy-backend.outcome }}"
        echo "Attempting to check app service status..."
        
        # Check app service status via Azure CLI
        az webapp show --name 'prodigy-prod-api' --resource-group '${{ env.AZURE_RESOURCE_GROUP }}' --query "state" -o tsv || echo "❌ Failed to check app service status"
        
        # Get recent deployment logs
        echo "📋 Recent deployment logs:"
        az webapp log deployment list --name 'prodigy-prod-api' --resource-group '${{ env.AZURE_RESOURCE_GROUP }}' --query "[0]" -o json || echo "❌ Failed to get deployment logs"
        
        # Quick test of API endpoint after deployment
        echo "🧪 Testing deployed backend API..."
        sleep 10  # Give app service a moment to start
        curl -f --max-time 10 "https://prodigy-prod-api.azurewebsites.net/" || echo "⚠️ Initial backend test failed - this is expected during startup"

  deploy-frontend:
    needs: [build-and-test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-artifacts
        path: ./frontend-artifacts

    - name: Verify frontend artifacts downloaded
      run: |
        echo "🔍 Verifying frontend artifacts were downloaded:"
        echo "Directory structure:"
        ls -la ./frontend-artifacts/ || echo "❌ Frontend artifacts directory not found!"
        echo ""
        echo "📊 Frontend artifacts file count: $(find ./frontend-artifacts -type f | wc -l)"
        echo "📋 Key files check:"
        echo "  - server.js: $(ls ./frontend-artifacts/server.js 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - package.json: $(ls ./frontend-artifacts/package.json 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - dist/index.html: $(ls ./frontend-artifacts/dist/index.html 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - dist/assets/ dir: $(ls -d ./frontend-artifacts/dist/assets 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo ""
        echo "📁 Full file listing:"
        find ./frontend-artifacts -type f

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure App Service
      id: deploy-frontend
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'prodigy-prod-frontend'
        package: './frontend-artifacts'

    - name: Verify frontend deployment
      run: |
        echo "🔍 Verifying frontend deployment completed..."
        echo "Deployment status: ${{ steps.deploy-frontend.outcome }}"
        echo "Attempting to check app service status..."
        
        # Check app service status via Azure CLI
        az webapp show --name 'prodigy-prod-frontend' --resource-group '${{ env.AZURE_RESOURCE_GROUP }}' --query "state" -o tsv || echo "❌ Failed to check app service status"
        
        # Get recent deployment logs
        echo "📋 Recent deployment logs:"
        az webapp log deployment list --name 'prodigy-prod-frontend' --resource-group '${{ env.AZURE_RESOURCE_GROUP }}' --query "[0]" -o json || echo "❌ Failed to get deployment logs"
        
        # Quick test of frontend endpoint after deployment
        echo "🧪 Testing deployed frontend..."
        sleep 10  # Give app service a moment to start
        curl -f --max-time 10 "https://prodigy-prod-frontend.azurewebsites.net/" || echo "⚠️ Initial frontend test failed - this is expected during startup"

  deploy-functions:
    needs: [build-and-test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download functions artifacts
      uses: actions/download-artifact@v4
      with:
        name: functions-artifacts
        path: ./functions-artifacts

    - name: Verify functions artifacts downloaded
      run: |
        echo "🔍 Verifying functions artifacts were downloaded:"
        echo "Directory structure:"
        ls -la ./functions-artifacts/ || echo "❌ Functions artifacts directory not found!"
        echo ""
        echo "📊 Functions artifacts file count: $(find ./functions-artifacts -type f | wc -l)"
        echo "📋 Key files check:"
        echo "  - host.json: $(ls ./functions-artifacts/host.json 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - functions.metadata: $(ls ./functions-artifacts/functions.metadata 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - Prodigy.Functions.dll: $(ls ./functions-artifacts/Prodigy.Functions.dll 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - worker.config.json: $(ls ./functions-artifacts/worker.config.json 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo "  - extensions.json: $(ls ./functions-artifacts/extensions.json 2>/dev/null && echo '✅ Found' || echo '❌ Missing')"
        echo ""
        echo "📁 Full file listing:"
        find ./functions-artifacts -type f | head -20
        echo ""
        echo "🔧 Creating optimized deployment package for Azure Functions..."
        
        # Create a clean deployment package specifically for Azure Functions
        mkdir -p functions-deployment-package
        
        # Copy all files from artifacts to deployment package
        cp -r ./functions-artifacts/* functions-deployment-package/
        
        # Verify the deployment package
        echo "📦 Functions deployment package contents:"
        find functions-deployment-package -type f | head -20
        echo ""
        echo "📊 Total files in deployment package: $(find functions-deployment-package -type f | wc -l)"

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Functions
      id: deploy-functions
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'prodigy-prod-functions'
        package: './functions-deployment-package'

    - name: Verify functions deployment
      run: |
        echo "🔍 Verifying functions deployment completed..."
        echo "Deployment status: ${{ steps.deploy-functions.outcome }}"
        echo "Attempting to check function app status..."
        
        # Check function app status via Azure CLI
        az functionapp show --name 'prodigy-prod-functions' --resource-group '${{ env.AZURE_RESOURCE_GROUP }}' --query "state" -o tsv || echo "❌ Failed to check function app status"
        
        # Get function app runtime status
        echo "📋 Function app runtime info:"
        az functionapp config show --name 'prodigy-prod-functions' --resource-group '${{ env.AZURE_RESOURCE_GROUP }}' --query "linuxFxVersion" -o tsv || echo "❌ Failed to get runtime info"
        
        # Quick test of functions endpoint after deployment
        echo "🧪 Testing deployed functions..."
        sleep 10  # Give function app a moment to start
        curl -f --max-time 10 "https://prodigy-prod-functions.azurewebsites.net/" || echo "⚠️ Initial functions test failed - this is expected for functions without HTTP triggers"

  verify-deployment:
    needs: [deploy-backend, deploy-frontend, deploy-functions, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Initial startup delay
      run: |
        echo "⏳ Giving Azure App Services time to complete startup..."
        echo "This initial delay helps ensure services are ready before health checks begin."
        sleep 60
        
    - name: Debug deployment outputs
      run: |
        echo "🔍 Debugging deployment outputs..."
        echo "Backend URL: '${{ needs.deploy-infrastructure.outputs.backend-url }}'"
        echo "Frontend URL: '${{ needs.deploy-infrastructure.outputs.frontend-url }}'"
        echo "Functions URL: '${{ needs.deploy-infrastructure.outputs.functions-url }}'"
        
    - name: Verify backend health
      run: |
        BACKEND_URL="${{ needs.deploy-infrastructure.outputs.backend-url }}"
        if [ -z "$BACKEND_URL" ]; then
          echo "❌ Error: Backend URL is empty or not set"
          exit 1
        fi
        echo "Checking backend health at: $BACKEND_URL"
        echo "⏳ Waiting for Azure App Service to start up..."
        
        # Wait for backend to be ready with retry logic
        max_attempts=12
        attempt=1
        wait_time=30
        
        while [ $attempt -le $max_attempts ]; do
          echo "🔄 Health check attempt $attempt/$max_attempts (waiting ${wait_time}s between attempts)..."
          
          if curl -f --max-time 30 --connect-timeout 10 --retry 0 "$BACKEND_URL/health"; then
            echo "✅ Backend is healthy after $attempt attempts"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Backend health check failed after $max_attempts attempts"
              echo "🔍 Attempting to get error details..."
              curl -v --max-time 30 "$BACKEND_URL/health" || true
              curl -v --max-time 30 "$BACKEND_URL/" || true
              exit 1
            else
              echo "⏳ Attempt $attempt failed, waiting ${wait_time}s before retry..."
              sleep $wait_time
            fi
          fi
          
          attempt=$((attempt + 1))
        done

    - name: Verify frontend
      run: |
        FRONTEND_URL="${{ needs.deploy-infrastructure.outputs.frontend-url }}"
        if [ -z "$FRONTEND_URL" ]; then
          echo "❌ Error: Frontend URL is empty or not set"
          exit 1
        fi
        echo "Checking frontend at: $FRONTEND_URL"
        echo "⏳ Waiting for Azure App Service to start up..."
        
        # Wait for frontend to be ready with retry logic
        max_attempts=8
        attempt=1
        wait_time=20
        
        while [ $attempt -le $max_attempts ]; do
          echo "🔄 Frontend check attempt $attempt/$max_attempts (waiting ${wait_time}s between attempts)..."
          
          if curl -f --max-time 30 --connect-timeout 10 --retry 0 "$FRONTEND_URL"; then
            echo "✅ Frontend is accessible after $attempt attempts"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Frontend accessibility check failed after $max_attempts attempts"
              echo "🔍 Attempting to get error details..."
              curl -v --max-time 30 "$FRONTEND_URL" || true
              exit 1
            else
              echo "⏳ Attempt $attempt failed, waiting ${wait_time}s before retry..."
              sleep $wait_time
            fi
          fi
          
          attempt=$((attempt + 1))
        done

    - name: Create deployment summary
      run: |
        BACKEND_URL="${{ needs.deploy-infrastructure.outputs.backend-url }}"
        FRONTEND_URL="${{ needs.deploy-infrastructure.outputs.frontend-url }}"
        FUNCTIONS_URL="${{ needs.deploy-infrastructure.outputs.functions-url }}"
        
        echo "## Deployment Successful! 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployed URLs:" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "$BACKEND_URL" ]; then
          echo "- **Backend API**: $BACKEND_URL" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Backend API**: ❌ URL not available" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "$FRONTEND_URL" ]; then
          echo "- **Frontend**: $FRONTEND_URL" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Frontend**: ❌ URL not available" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "$FUNCTIONS_URL" ]; then
          echo "- **Functions**: $FUNCTIONS_URL" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Functions**: ❌ URL not available" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify all services are working correctly" >> $GITHUB_STEP_SUMMARY
        echo "2. Configure custom domain names if needed" >> $GITHUB_STEP_SUMMARY
        echo "3. Set up monitoring and alerts" >> $GITHUB_STEP_SUMMARY
