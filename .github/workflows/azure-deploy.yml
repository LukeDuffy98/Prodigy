name: Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AZURE_RESOURCE_GROUP: 'Prodigy1'
  AZURE_LOCATION: 'eastus'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build .NET solution
      run: dotnet build --no-restore

    - name: Publish backend
      run: |
        cd src/backend
        dotnet publish -c Release -o bin/Release/net8.0/publish

    - name: Publish functions
      run: |
        cd azure-functions
        dotnet publish -c Release -o bin/Release/net8.0/publish

    - name: Install frontend dependencies
      run: |
        cd src/frontend
        npm ci

    - name: Build frontend
      run: |
        cd src/frontend
        npm run build

    - name: Run frontend linting
      run: |
        cd src/frontend
        npm run lint

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifacts
        path: |
          src/backend/bin/Release/net8.0/publish/
          !src/backend/bin/Release/net8.0/publish/**/*.pdb

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifacts
        path: src/frontend/dist/

    - name: Upload functions artifacts
      uses: actions/upload-artifact@v4
      with:
        name: functions-artifacts
        path: |
          azure-functions/bin/Release/net8.0/publish/
          !azure-functions/bin/Release/net8.0/publish/**/*.pdb

  deploy-infrastructure:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      backend-url: ${{ steps.deploy-rest-api.outputs.backendUrl }}
      frontend-url: ${{ steps.deploy-rest-api.outputs.frontendUrl }}
      functions-url: ${{ steps.deploy-rest-api.outputs.functionsUrl }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Deploy Infrastructure via REST API
      id: deploy-rest-api
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
        AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
        APP_NAME: 'prodigy'
        ENVIRONMENT: 'prod'
        APP_SERVICE_PLAN_SKU: 'B1'
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LINKEDIN_CLIENT_ID: ${{ secrets.LINKEDIN_CLIENT_ID }}
        LINKEDIN_CLIENT_SECRET: ${{ secrets.LINKEDIN_CLIENT_SECRET }}
      run: |
        echo "ðŸš€ Starting REST API-based infrastructure deployment..."
        echo "ðŸ“‹ Deployment parameters:"
        echo "  App Name: prodigy"
        echo "  Environment: prod" 
        echo "  Location: ${{ env.AZURE_LOCATION }}"
        echo "  App Service Plan SKU: B1"
        echo "  Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        
        chmod +x ./deploy-with-rest-api.sh
        ./deploy-with-rest-api.sh

  deploy-backend:
    needs: [build-and-test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-artifacts
        path: ./backend-artifacts

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'prodigy-prod-api'
        package: './backend-artifacts'

  deploy-frontend:
    needs: [build-and-test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-artifacts
        path: ./frontend-artifacts

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'prodigy-prod-frontend'
        package: './frontend-artifacts'

  deploy-functions:
    needs: [build-and-test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download functions artifacts
      uses: actions/download-artifact@v4
      with:
        name: functions-artifacts
        path: ./functions-artifacts

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: 'prodigy-prod-functions'
        package: './functions-artifacts'

  verify-deployment:
    needs: [deploy-backend, deploy-frontend, deploy-functions]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Verify backend health
      run: |
        echo "Checking backend health..."
        curl -f ${{ needs.deploy-infrastructure.outputs.backend-url }}/health || exit 1
        echo "Backend is healthy"

    - name: Verify frontend
      run: |
        echo "Checking frontend..."
        curl -f ${{ needs.deploy-infrastructure.outputs.frontend-url }} || exit 1
        echo "Frontend is accessible"

    - name: Create deployment summary
      run: |
        echo "## Deployment Successful! ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployed URLs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend API**: ${{ needs.deploy-infrastructure.outputs.backend-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: ${{ needs.deploy-infrastructure.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Functions**: ${{ needs.deploy-infrastructure.outputs.functions-url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify all services are working correctly" >> $GITHUB_STEP_SUMMARY
        echo "2. Configure custom domain names if needed" >> $GITHUB_STEP_SUMMARY
        echo "3. Set up monitoring and alerts" >> $GITHUB_STEP_SUMMARY